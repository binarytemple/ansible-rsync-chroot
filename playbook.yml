---
- hosts: all
  become: yes
  become_user: root
  vars_files:
  - "./users.yml"
  vars:
  - chroot_dir: "/home/chroot"
  - group_name: "rsyncusers"
  tasks:
    - name: setup chroot dir 
      file: path="{{ chroot_dir }}/home" state=directory
    - name: setup global ssh authorized_keys directory
      file: path="/etc/ssh/keys" state=directory owner=root group=root mode=0755
    - name: install epel 
      yum: name=epel-release state=present update_cache=no
      tags:
      - installs

    - name: install deps
      yum: name="{{ packages }}" state=present update_cache=no
      tags:
       - installs
      vars:
        packages:
        - rsync
        - vim
        - htop
        - strace

    - name: setup ssh 
      action: template src=templates/sshd_config.j2 dest=/etc/ssh/sshd_config owner=root group=root mode=0644
      notify:
       - reload sshd

    - name: create rsyncusers group
      group:
        name: rsyncusers
        state: present  

    - name: create rsync users
      user: name="{{ item.user }}"
            home="/home/{{item.user}}" create_home=false comment="{{group_name}} {{item.user}}" group="{{group_name}}"
      with_items:
        - "{{ chroot_users }}"

    - name: create rsync users chroot home
      file: path="{{ chroot_dir }}/home/{{item.user}}" state=directory owner="{{item.user}}" group="{{group_name}}" mode=0700
      with_items:
        - "{{ chroot_users }}"

    - name: Set authorized key, removing all the authorized key already set
      authorized_key: manage_dir=no path="/etc/ssh/keys/{{ item.user }}/authorized_keys" user="{{ item.user }}" key="{{item.github_key}}" validate_certs=False state=present 
      with_items:
        - "{{ chroot_users }}"

    - name: Run setup scripts
      shell: |
        set -e #fail on error 
        set -u #error on unset var 
        set -v #verbose
        export CHROOT_DIR="{{chroot_dir}}"
        mkdir -p $CHROOT_DIR/home
        mkdir -p $CHROOT_DIR/lib64
        mkdir -p $CHROOT_DIR/bin
        mkdir -p $CHROOT_DIR/usr/bin
        mkdir -p $CHROOT_DIR/etc
        mkdir -p $CHROOT_DIR/var
        mkdir -p $CHROOT_DIR/var/log
        # mkdir -p $CHROOT_DIR/lib
        mkdir -p $CHROOT_DIR/dev

        # Extract library dependencies from executables
        PROGS=(/bin/ls /bin/echo /bin/rsync /bin/cat /bin/bash)
        for i in ${PROGS[*]}  ; do 
            ldd $i | awk '{ print $3 }' | sed -n '/\//{p;}' | while read so ; do  
                mkdir -p $CHROOT_DIR/$(dirname $so); 
                cp -n $so $CHROOT_DIR/$so ; 
            done ; 
            mkdir -p $CHROOT_DIR/$(dirname $i) ; 
            cp -n $i $CHROOT_DIR/${i} ; 
        done 

        #link the programs in /bin/ to the programs in /usr/bin because opinionated env
        for i in ${PROGS[*]}  ; do 
        test -f $CHROOT_DIR/usr/${i} || ln $CHROOT_DIR/${i} $CHROOT_DIR/usr/${i}  
        done

        # Copy ld-linux shared object to chroot
        find /usr/lib64 | grep ld-linux | while read i ; do cp -n $i $CHROOT_DIR/lib64/ ; done

        # Copy pam libraries to chroot 
        find /usr 2> /dev/null | grep libpam | while read i ; do echo cp -nr $i /home/chroot/$(echo $i | sed -e 's_/usr/__') ; done

        # Copy nss library files to chroot 
        find /usr 2> /dev/null | egrep "(libnss_files.so|libnss_sss.so)" | while read i ; do cp -n $i $CHROOT_DIR/$(echo $i | sed -e 's_/usr/__') ; done 

        grep {{group_name}} /etc/passwd | sed -e 's_/home/chroot__' >   $CHROOT_DIR/etc/passwd
        grep {{group_name}} /etc/group   >   $CHROOT_DIR/etc/group
        # grep {{group_name}} /etc/shadow  >   $CHROOT_DIR/etc/shadow
        # cp -n /etc/nsswitch.conf $CHROOT_DIR/etc/
        # cp -n -r /etc/pam.d      $CHROOT_DIR/etc/

        test -c  $CHROOT_DIR/dev/console     ||  mknod -m 622 $CHROOT_DIR/dev/console c 5 1
        test -c  $CHROOT_DIR/dev/null        ||  mknod -m 666 $CHROOT_DIR/dev/null c 1 3
        test -c  $CHROOT_DIR/dev/zero        ||  mknod -m 666 $CHROOT_DIR/dev/zero c 1 5
        test -c  $CHROOT_DIR/dev/ptmx        ||  mknod -m 666 $CHROOT_DIR/dev/ptmx c 5 2
        test -c  $CHROOT_DIR/dev/tty         ||  mknod -m 666 $CHROOT_DIR/dev/tty c 5 0
        test -c  $CHROOT_DIR/dev/random      ||  mknod -m 444 $CHROOT_DIR/dev/random c 1 8
        test -c  $CHROOT_DIR/dev/urandom     ||  mknod -m 444 $CHROOT_DIR/dev/urandom c 1 9
        chown root:tty $CHROOT_DIR/dev/{console,ptmx,tty}

        exit 0
      tags:
         - shell
      args:
        executable: /bin/bash


  handlers:
  - name: reload sshd
    service: name=sshd state=reloaded
